use "Biquad.omni";
use "GutterLib.omni";

ins 1:
    audio_input

buffers:
    freqs

params:
    gamma {0.2}
    omega {0.0002}
    c {0.01}
    dt {0.03}
    smoothing {1.0}
    distortion {2, 0, 5}
    filter_toggle {1, 0, 1}
    q_param {0.9, 0.0, 1.0}
    enable_audio_input {0, 0, 1}
    update_coeffs {1, 0, 1}

init:
    num_banks = 2
    num_filters = 24

    duffX = 0.0
    duffY = 0.0
    dx = 0.0
    dy = 0.0
    t = 0.0 

    filter_bank = Data[Data[Biquad]](num_banks)
    for bank in filter_bank:
        bank = Data[Biquad](num_filters)
        for filter in bank:
            filter = Biquad()
            # filter.freq = (noise() * 15000) + 100
            filter.Q = q_param

def reset_duff():
    duffX = 0.0;
    duffY = 0.0
    dx = 0.0
    dy = 0.0
    t = 0.0

perform: 
    if update_coeffs == 1:
        for bank in filter_bank:
            for counter, filter in bank:
                filter.freq = freqs[counter]
                filter.Q = q_param      
                filter.calculate_coeffs()

    sample:
        finalY = 0

        # Filter Bank
        if filter_toggle == 1:
            for bank in filter_bank:
                for filter in bank:                   
                    filter.next_sample(duffX)
                    finalY += zap(filter.y)
        else:
            finalY = duffX

        # DUFFING
        if enable_audio_input == 1:
            dy = finalY - (finalY * finalY * finalY) - (c * duffY) + gamma * in1
        else:
            dy = finalY - (finalY * finalY * finalY) - (c * duffY) + gamma * sin(omega * t)
        
        duffY += dy
        dx = duffY
        duffX = lowpass(finalY + dx, duffX, smoothing + 1)
        duffX = distort(duffX, distortion)

        t += dt
        
        out1 = finalY * 0.125
            