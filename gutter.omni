use "Biquad.omni";
use "GutterLib.omni";

buffers:
    freqs

params:
    gamma {0.2, 0, 10}
    omega {0.0002, 0.0001, 1}
    c {0.01, 0.0001, 1}
    dt {0.03, 0, 5}
    smoothing {1.0, 0, 5}
    distortion {1, 0, 5}
    q {20, 2.5, 800}

    master_gain {1.0, 0.0, 2.0}
    gain1 {1.0, 0.0, 2.0}
    gain2 {1.0, 0.0, 2.0}

    filter_toggle {1, 0, 1}
    enable_audio_input {0, 0, 1}

init:
    num_banks = 2
    num_filters = 24

    duffX = 0.0
    duffY = 0.0
    dx = 0.0
    dy = 0.0
    t = 0.0 

    # internal values because we cannot assign to parameters

    gamma_lp = gamma
    omega_lp = omega
    c_lp = c
    dt_lp = dt
    q_lp = q
    smoothing_lp = smoothing

    filter_bank = Data[Data[Biquad]](num_banks)
    for bank_index, bank in filter_bank:
        bank = Data[Biquad](num_filters)
        for filter in bank:
            filter = Biquad()
            filter.Q = q_Lp
            if bank_index == 0:
                filter.gain = gain1
            elif bank_index == 1:
                filter.gain = gain2

def reset_duff():
    duffX = 0.0;
    duffY = 0.0
    dx = 0.0
    dy = 0.0
    t = 0.0

perform:
    for bank_index, bank in filter_bank:
        for filter_index, filter in bank:
            filter.freq = freqs[filter_index]
            filter.Q = q_lp
            if bank_index == 0:
                filter.gain = gain1
            elif bank_index == 1:
                filter.gain = gain2
            filter.calculate_coeffs()

    sample:

        smoothing_lp = lowpass(smoothing, smoothing_lp, smoothing+1)
        gamma_lp = lowpass(gamma, gamma_lp, smoothing_lp+1)
        omega_lp = lowpass(omega, omega_lp, smoothing_lp+1)
        c_lp = lowpass(c, c_lp, smoothing_lp+1)
        dt_lp = lowpass(dt, dt_lp, smoothing_lp+1)
        q_lp = lowpass(q, q_lp, smoothing_lp+1)

        finalY = 0
        # Filter Bank
        if filter_toggle == 1:
            for bank in filter_bank:
                for filter in bank:                   
                    filter.next_sample(duffX, master_gain)
                    finalY += zap(filter.y * filter.gain * master_gain)
        else:
            finalY = duffX

        # DUFFING
        if enable_audio_input == 1:
            dy = finalY - (finalY * finalY * finalY) - (c_lp * duffY) + gamma_lp * in1
        else:
            dy = finalY - (finalY * finalY * finalY) - (c_lp * duffY) + gamma_lp * sin(omega_lp * t)
        
        duffY += dy
        dx = duffY
        duffX = lowpass(finalY + dx, duffX, smoothing_lp+1)

        if filter_toggle == 1:
            duffX = distort(duffX, distortion)
            out1 = finalY * 0.125
        else:
            duffX = clip(duffX, -100.0, 100.0)
            if abs(duffX) > 99.0:
                duffX = 0.0
                duffY = 0.0
                dx = 0.0
                dy = 0.0
                t = 0.0

            out1 = clip(duffX * master_gain, -1.0, 1.0)

        t += dt_lp
    
            