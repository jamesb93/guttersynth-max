use "Biquad.omni";
use "GutterLib.omni";



ins 1:
    audio_input

buffers:
    freqs

params:
    gamma {0.2}
    omega {0.0002}
    c {0.01}
    dt {0.03}
    smoothing {1.0}
    distortion {2, 0, 5}
    filter_toggle {1, 0, 1}
    q_param {0.9, 0.0, 1.0}

init:
    num_banks = 2
    num_filters = 24

    duffX = 0.0
    duffY = 0.0
    dx = 0.0
    dy = 0.0
    t = 0.0    

    # past storage
    gamma_past = gamma
    omega_past = omega
    c_past = c
    dt_past = dt
    smooth_past = smoothing

    # 2 Data
    freq1 = Data[float](num_filters)
    freq2 = Data[float](num_filters)
    filter_bank = Data[Data[Biquad]](2)
    for bank in filter_bank:
        bank = Data[Biquad](24)
        for filter in bank:
            filter = Biquad()
            # filter.freq = (noise() * 15000) + 100
            filter.Q = q_param

def reset_duff():
    duffX = 0.0;
    duffY = 0.0
    dx = 0.0
    dy = 0.0
    t = 0.0

sample:
    finalY = 0

    # Filter Bank
    if filter_toggle == 1:
        for bank in filter_bank:
            counter = 0
            for filter in bank:
                filter.freq = freqs[counter]
                filter.Q = q_param
                filter.calculate_coeffs()
                out9 = filter.freq
                counter += 1
                
                filter.next_sample(duffX)
                finalY += zap(filter.y)
                out2 = filter.a0
                out3 = filter.a1
                out4 = filter.a2
                out5 = filter.b1
                out6 = filter.b2
                out7 = filter.K
                out8 = filter.norm
    else:
        finalY = duffX

    # DUFFING
    dy = finalY - (finalY * finalY * finalY) - (c * duffY) + gamma * in1
    # dy = finalY - (finalY * finalY * finalY) - (c * duffY) + gamma * sin(omega * t)
    
    duffY += dy
    dx = duffY
    duffX = lowpass(finalY + dx, duffX, smoothing + 1)
    duffX = distort(duffX, distortion)

    t += dt
    
    out1 = finalY * 0.125

    # Store 'now' in the 'past'
    gamma_past = gamma
    omega_past = omega
    c_past = c
    dt_past = dt
